{"version":3,"sources":["logo.svg","components/AddressForm.js","components/Maps/Location.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","body","backgroundColor","palette","common","white","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","secondary","main","form","width","submit","group","AddressForm","props","useState","address","setAddress","city","setCity","state","setState","zip","setZip","React","baseMap","setBaseMap","classes","FormControl","component","Typography","variant","gutterBottom","Grid","container","item","xs","TextField","required","id","name","label","value","fullWidth","autoComplete","onChange","e","target","sm","FormLabel","RadioGroup","aria-label","className","FormControlLabel","control","Radio","Button","type","color","onClick","event","preventDefault","getFormValues","LocationMap","position","lat","lng","Map","center","zoom","Number","TileLayer","attribution","url","Marker","Popup","root","flexGrow","padding","textAlign","text","App","dotenv","config","setLng","setLat","style","src","logo","alt","fetch","process","then","res","json","results","locations","displayLatLng","console","log","Location","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.84d6f7ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\n\nconst useStyles = makeStyles(theme => ({\n  '@global': {\n    body: {\n      backgroundColor: theme.palette.common.white,\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%',\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  group: {\n    margin: theme.spacing(1, 0),\n  },\n}));\n\nconst AddressForm = (props) => {\n  const [address, setAddress] = useState('');\n  const [city, setCity] = useState('');\n  const [state, setState] = useState('');\n  const [zip, setZip] = useState('');\n  const [baseMap, setBaseMap] = React.useState('A');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    props.getFormValues(address, city, state, zip, baseMap);\n  }\n\n  const classes = useStyles();\n\n  return (\n    <FormControl component=\"fieldset\">\n      <Typography variant=\"h6\" gutterBottom>\n        Enter address\n      </Typography>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <TextField\n            required\n            id=\"address1\"\n            name=\"address1\"\n            label=\"Address\"\n            value={address}\n            fullWidth\n            autoComplete=\"billing address-line1\"\n            onChange={e => setAddress(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            id=\"city\"\n            name=\"city\"\n            label=\"City\"\n            value={city}\n            fullWidth\n            autoComplete=\"billing address-level2\"\n            onChange={e => setCity(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            id=\"state\"\n            name=\"state\"\n            label=\"State/Province/Region\"\n            value={state}\n            fullWidth\n            onChange={e => setState(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <TextField\n            required\n            id=\"zip\"\n            name=\"zip\"\n            label=\"Zip / Postal code\"\n            value={zip}\n            fullWidth\n            autoComplete=\"billing postal-code\"\n            onChange={e => setZip(e.target.value)}\n          />\n        </Grid>\n        <Grid item xs={12} sm={6}>\n          <FormLabel component=\"legend\">Base Map</FormLabel>\n          <RadioGroup\n            aria-label=\"base map\"\n            name=\"baseMap\"\n            className={classes.group}\n            value={baseMap}\n            onChange={e => setBaseMap(e.target.value)}\n          >\n            <FormControlLabel value=\"A\" control={<Radio />} label=\"Base Map A\" />\n            <FormControlLabel value=\"B\" control={<Radio />} label=\"Base Map B\" />\n            <FormControlLabel value=\"C\" control={<Radio />} label=\"Base Map C\" />\n          </RadioGroup>\n        </Grid>\n        <Grid item xs={12} sm={12}>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onClick={handleSubmit}\n          >\n            Submit\n          </Button>\n        </Grid>\n      </Grid>\n    </FormControl>\n  );\n};\n\nexport default AddressForm;\n","import React from 'react';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\n\nconst LocationMap = (props) => {\n  \n  const position = [props.lat, props.lng];\n  \n  return (\n    <Map center={position} zoom={Number(props.zoom)}>\n    <TileLayer\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    />\n    <Marker position={position}>\n        <Popup>\n        #4 Private Drive <br /> Ocean Isle Beach, NC.\n        </Popup>\n    </Marker>\n    </Map>\n  );\n}\n\nexport default LocationMap;","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport fetch from 'node-fetch';\nimport Grid from '@material-ui/core/Grid';\nimport AddressForm from './components/AddressForm.js'\nimport { makeStyles } from '@material-ui/core/styles';\nimport LocationMap from './components/Maps/Location.js'\nimport dotenv from 'dotenv';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\nconst App = () => {\n\n  dotenv.config();\n  const mqKey = process.env.REACT_APP_MAPQUEST_KEY;\n\n  const [lng, setLng] = useState(-85);\n  const [lat, setLat] = useState(34);\n\n  const classes = useStyles();\n\n  const getFormValues = (address, city, state, zip, value) => {\n    fetch(`https://www.mapquestapi.com/geocoding/v1/address?key=${mqKey}&inFormat=kvp&outFormat=json&location=${address}+${city}+${state}+${zip}&thumbMaps=false`)\n      .then(res => res.json())\n      .then(json => {\n        setLng(json.results[0].locations[0].displayLatLng.lng);\n        setLat(json.results[0].locations[0].displayLatLng.lat);\n        console.log(value);\n      });\n  }\n\n  return (\n    <div className=\"App\">\n      <div className={classes.root}>\n      <Grid container style={{ padding: 10 }} spacing={1}>\n        <Grid item xs={12} sm={12}>\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              <p>\n                Simple react-leaflet example created with create-react-app.\n              </p>\n          </header>\n        </Grid>\n        <Grid item xs={12} sm={4}>\n          <AddressForm\n            getFormValues={getFormValues}\n          />\n        </Grid>\n        <Grid item xs={12} sm={8}>\n          <LocationMap\n            lat={lat}\n            lng={lng}\n            zoom='13'\n          />\n        </Grid>\n      </Grid>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}