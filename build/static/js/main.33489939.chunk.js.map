{"version":3,"sources":["components/AppBar.js","components/Maps/CovidMap.js","components/Maps/HeatMap.js","components/BaseMapSelectDrawer.js","components/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","header","textAlign","color","fontWeight","verticalAlign","SearchAppBar","props","classes","className","Toolbar","IconButton","edge","aria-label","onClick","toggleDrawer","FormControlLabel","control","Switch","checked","heatMap","onChange","handleToggleHeatMap","label","dotenv","config","onEachFeaturePoint","feature","layer","properties","Combined_k","popup","Confirmed","Deaths","Recovered","bindPopup","closeButton","offset","L","point","pointToLayer","ll","circleMarker","opacity","weight","fillColor","fillOpacity","radius","calcRadius","val","Math","pow","CovidMap","baseMap","onMapMove","position","lat","lng","Map","center","zoom","Number","onMoveend","TileLayer","attribution","url","apiKey","process","GeoJSON","data","onEachFeature","points","features","HeatMap","longitudeExtractor","m","Long_","latitudeExtractor","Lat","intensityExtractor","list","width","padding","fullList","TemporaryDrawer","useState","setBaseMap","Drawer","open","drawerState","onClose","role","onKeyDown","FormControl","component","RadioGroup","name","group","value","e","newBaseMap","target","getBaseLayer","tileLayers","map","Tooltip","title","placement","key","Radio","body","backgroundColor","paper","palette","text","secondary","containerClasses","Dashboard","setLng","setLat","setZoom","resStreet","setResStreet","resCity","setResCity","resState","setResState","resZip","setResZip","inputError","setInputError","React","setDrawerState","setHeatMap","getBaseMapObject","find","o","handleMapMove","newZoom","getZoom","getCenter","event","type","toast","notify","Grid","container","item","xs","sm","handleSearch","searchValue","fetch","then","res","json","console","log","results","locations","displayLatLng","street","adminArea5","adminArea3","postalCode","prev","city","state","zip","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.33489939.chunk.js","sourcesContent":["import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport { Switch, IconButton, Toolbar, FormControlLabel } from '@material-ui/core/'\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  menuButton: {\n    marginRight: theme.spacing(2)\n  },\n  header: {\n    textAlign: 'center',\n    color: '#ff7900',\n    fontWeight: \"bold\",\n    verticalAlign: \"baseline\",\n  },\n}))\n\nexport default function SearchAppBar (props) {\n\n  const classes = useStyles()\n\n  return (\n    <div className={classes.root}>\n      <Toolbar className={classes.header}>\n        <IconButton\n          edge='start'\n          className={classes.menuButton}\n          color='inherit'\n          aria-label='open drawer'\n          onClick={props.toggleDrawer()}\n        >\n        <MenuIcon />\n        </IconButton>\n        <FormControlLabel\n          control={\n            <Switch\n              color='secondary'\n              checked={props.heatMap}\n              onChange={props.handleToggleHeatMap}\n            />\n          }\n          label='Heat Map'\n        />\n        <h2>\n          US COVID-19 Cases by County\n        </h2>\n      </Toolbar>\n    </div>\n  )\n}\n","import React from 'react'\nimport { Map, TileLayer, GeoJSON } from 'react-leaflet'\nimport L from 'leaflet'\nimport dotenv from 'dotenv'\nimport data from '../../data/data.json'\n\ndotenv.config()\nconst tfKey = process.env.REACT_APP_THUNDERFOREST_KEY\nconst minValue = 1\nconst minRadius = 2\n\nconst onEachFeaturePoint = (feature, layer) => {\n  if (feature.properties && feature.properties.Combined_k) {\n    const popup = `<h3> ${feature.properties.Combined_k}</h3>\n    <table>\n      <tbody>\n        <tr>\n          <td>Cases </td>\n          <td>${feature.properties.Confirmed}</td>\n        </tr>\n        <tr>\n          <td>Deaths</td>\n          <td>${feature.properties.Deaths}</td>\n        </tr>\n        <tr>\n          <td>Recovered </td>\n          <td>${feature.properties.Recovered}</td>\n        </tr>\n          <tr>\n          <td>\n            <h3>\n              <a href='https://www.google.com/search?q=${feature.properties.Combined_k} covid-19' target='_blank'> Latest News </a>\n            </h3>\n          </td>\n        </tr>\n      </tbody>\n    </table>`\n\n    layer.bindPopup(popup, { closeButton: false, offset: L.point(0, -20) })\n  }\n}\n\nconst pointToLayer = (feature, ll) => {\n  return L.circleMarker(ll, {\n    color: '#ff7900',\n    opacity: .9,\n    weight: 2,\n    fillColor: '#ff7900',\n    fillOpacity: .8,\n    radius: calcRadius(feature.properties.Confirmed)\n  })\n}\n\nconst calcRadius = val =>\n  1.0083 * Math.pow(val / minValue, .30) * minRadius\n\nconst CovidMap = props => {\n  const { baseMap, onMapMove, lat, lng } = props\n  const position = [lat, lng]\n\n  return (\n    <Map center={position} zoom={Number(props.zoom)} onMoveend={onMapMove}>\n      <TileLayer\n        attribution={baseMap.attribution}\n        url={baseMap.apiKey ? `${baseMap.url}?apikey=${tfKey}` : baseMap.url}\n      />\n      <GeoJSON data={data} onEachFeature={onEachFeaturePoint} pointToLayer={pointToLayer} />\n    </Map>\n  )\n}\n\nexport default CovidMap\n","import React from 'react'\nimport { Map, TileLayer } from 'react-leaflet'\nimport HeatmapLayer from 'react-leaflet-heatmap-layer'\nimport data from '../../data/data.json'\nimport dotenv from 'dotenv'\n\ndotenv.config()\nconst tfKey = process.env.REACT_APP_THUNDERFOREST_KEY\nconst points = data.features\n\nconst HeatMap = props => {\n  const { baseMap, onMapMove, lat, lng } = props\n  const position = [lat, lng]\n\n  return (\n    <div>\n      <Map center={position} zoom={Number(props.zoom)} onMoveend={onMapMove}>\n        <HeatmapLayer\n          points={points}\n          longitudeExtractor={m => m.properties.Long_}\n          latitudeExtractor={m => m.properties.Lat}\n          intensityExtractor={m => m.properties.Confirmed}\n        />\n        <TileLayer\n          attribution={baseMap.attribution}\n          url={baseMap.apiKey ? `${baseMap.url}?apikey=${tfKey}` : baseMap.url}\n        />\n      </Map>\n    </div>\n  )\n}\n\nexport default HeatMap\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Drawer from '@material-ui/core/Drawer'\n\nimport Radio from '@material-ui/core/Radio'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormControl from '@material-ui/core/FormControl'\n\nimport * as tileLayers from './Maps/tileLayers.json'\n\nconst useStyles = makeStyles({\n  list: {\n    width: 275,\n    padding: '10px'\n  },\n  fullList: {\n    width: 'auto'\n  }\n})\n\nexport default function TemporaryDrawer (props) {\n  const classes = useStyles()\n\n  const [baseMap, setBaseMap] = useState('')\n\n  const baseMapChange = newBaseMap => {\n    setBaseMap(newBaseMap)\n    props.getBaseLayer(newBaseMap)\n  }\n\n  const RenderLayerOptions = () => {\n    return tileLayers.layers.map(layer => (\n      <Tooltip title={layer.name} placement='top' key={layer.name}>\n        <FormControlLabel\n          value={layer.name}\n          control={<Radio />}\n          label={layer.name}\n        />\n      </Tooltip>\n    ))\n  }\n\n  const sideList = side => (\n    <div\n      className={classes.list}\n      role='presentation'\n      onClick={props.toggleDrawer()}\n      onKeyDown={props.toggleDrawer()}\n    >\n      <FormControl component='fieldset'>\n        <h3>Select Base Map</h3>\n        <RadioGroup\n          aria-label='base map'\n          name='baseMap'\n          className={classes.group}\n          value={baseMap}\n          onChange={e => baseMapChange(e.target.value)}\n        >\n          {RenderLayerOptions()}\n        </RadioGroup>\n      </FormControl>\n    </div>\n  )\n  return (\n    <div>\n      <Drawer open={props.drawerState} onClose={props.toggleDrawer()}>\n        {sideList('left')}\n      </Drawer>\n    </div>\n  )\n}\n","import React, { useState } from 'react'\nimport '../App.css'\nimport fetch from 'node-fetch'\nimport Grid from '@material-ui/core/Grid'\nimport AppBar from './AppBar.js'\nimport { makeStyles } from '@material-ui/core/styles'\nimport CovidMap from './Maps/CovidMap.js'\nimport HeatMap from './Maps/HeatMap.js'\nimport BaseMapSelectDrawer from './BaseMapSelectDrawer.js'\nimport toast from 'toasted-notes'\nimport 'toasted-notes/src/styles.css'\n\nimport dotenv from 'dotenv'\n\nimport * as tileLayers from './Maps/tileLayers.json'\n\nconst useStyles = makeStyles(theme => ({\n  '@global': {\n    body: {\n      backgroundColor: '#282c34'\n    }\n  },\n  root: {\n    flexGrow: 1,\n    padding: '10px'\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  },\n  containerClasses: {\n    backgroundColor: '#fff',\n    padding: '10px'\n  }\n}))\n\nconst Dashboard = () => {\n  dotenv.config()\n  const mqKey = process.env.REACT_APP_MAPQUEST_KEY\n\n  const [lng, setLng] = useState(-96.967784)\n  const [lat, setLat] = useState(38.119880)\n  const [zoom, setZoom] = useState(4)\n  const [resStreet, setResStreet] = useState('')\n  const [resCity, setResCity] = useState('')\n  const [resState, setResState] = useState('')\n  const [resZip, setResZip] = useState('')\n  const [inputError, setInputError] = useState('')\n  const [drawerState, setDrawerState] = React.useState(false)\n  const [baseMap, setBaseMap] = useState('CartoDB DarkMatter')\n  const [heatMap, setHeatMap] = React.useState(false)\n\n  const classes = useStyles()\n\n  const geocodeSearch = searchValue => {\n    fetch(\n      `https://www.mapquestapi.com/geocoding/v1/address?key=${mqKey}&inFormat=kvp&outFormat=json&location=${searchValue}&thumbMaps=false`\n    )\n      .then(res => res.json())\n      .then(json => {\n        console.log('json: ', json.results[0].locations[0].displayLatLng);\n        setLng(json.results[0].locations[0].displayLatLng.lng)\n        setLat(json.results[0].locations[0].displayLatLng.lat)\n        setResStreet(json.results[0].locations[0].street)\n        setResCity(json.results[0].locations[0].adminArea5)\n        setResState(json.results[0].locations[0].adminArea3)\n        setResZip(json.results[0].locations[0].postalCode)\n      })\n  }\n\n  const getBaseLayer = baseMap => {\n    setBaseMap(baseMap)\n  }\n\n  const getBaseMapObject = baseMap => {\n    const baseMapObj = tileLayers.layers.find(o => o.name === baseMap)\n    return baseMapObj\n  }\n\n  const toggleHeatMap = () => {\n    setHeatMap(prev => !prev)\n  }\n\n  const handleMapMove = e => {\n    const newZoom = e.target.getZoom()\n    const { lng, lat } = e.target.getCenter()\n\n    setZoom(newZoom)\n    setLng(lng)\n    setLat(lat)\n  }\n\n  const toggleDrawer = () => event => {\n    if (\n      event.type === 'keydown' &&\n      (event.key === 'Tab' || event.key === 'Shift')\n    ) {\n      return\n    }\n    setDrawerState(!drawerState)\n  }\n\n  const reportError = () => {\n    toast.notify(inputError)\n    setInputError('')\n  }\n\n  return (\n    <div className='App'>\n      <div className={classes.root}>\n        {inputError && reportError()}\n        <BaseMapSelectDrawer\n          toggleDrawer={toggleDrawer}\n          drawerState={drawerState}\n          getBaseLayer={getBaseLayer}\n        />\n        <Grid container spacing={1}>\n          <Grid item xs={12} sm={12}>\n            <AppBar\n              handleSearch={geocodeSearch}\n              drawerState={drawerState}\n              toggleDrawer={toggleDrawer}\n              handleToggleHeatMap={toggleHeatMap}\n              heatMap={heatMap}\n            />\n          </Grid>\n          <Grid item xs={12} sm={12}>\n            {!heatMap && (\n              <CovidMap\n                lat={lat}\n                lng={lng}\n                street={resStreet}\n                city={resCity}\n                state={resState}\n                zip={resZip}\n                zoom={zoom}\n                baseMap={getBaseMapObject(baseMap)}\n                onMapMove={handleMapMove}\n              />\n            )}\n            {heatMap && (\n              <HeatMap\n                lat={lat}\n                lng={lng}\n                street={resStreet}\n                city={resCity}\n                state={resState}\n                zip={resZip}\n                zoom={zoom}\n                baseMap={getBaseMapObject(baseMap)}\n                onMapMove={handleMapMove}\n              />\n            )}\n          </Grid>\n        </Grid>\n      </div>\n    </div>\n  )\n}\n\nexport default Dashboard\n","import React from 'react'\nimport './App.css'\nimport 'toasted-notes/src/styles.css'\nimport Dashboard from './components/Dashboard.js'\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <div>\n        <Dashboard />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import fetch from 'node-fetch'\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}